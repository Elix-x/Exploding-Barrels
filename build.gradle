buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.164+', changing: true
	}
}
plugins {
	id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = java_version

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

if(!project.hasProperty('publish_name')) ext.publish_name = project.name
if(!project.hasProperty('publish_desc')) ext.publish_desc = project.description
if(!project.hasProperty('github_repo')) ext.github_repo = publish_name
ext.github_repo_full = github_owner + '/' + github_repo

archivesBaseName = name
version = "${version_major}.${version_minor}.${version_patch}"
if(version_channel != 'release') version += "-$version_channel$build"
version += "-$minecraft_version"
group = group

minecraft {
	mappings channel: mcp_channel, version: mcp_version
	// makeObfSourceJar = false
	
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				boombarrels {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				boombarrels {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			args '--mod', 'boombarrels', '--all', '--output', file('src/generated/resources/')

			mods {
				boombarrels {
					source sourceSets.main
				}
			}
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
			"Specification-Title": github_repo,
			"Specification-Vendor": github_owner,
			"Specification-Version": "${version_major}.${version_minor}",
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor": github_owner,
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

javadoc {
	failOnError = false
	options.encoding = 'UTF-8'
	options.addBooleanOption('html5', true)
}

// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication){
			pom {
				name = publish_name
				description = publish_desc
				url = "https://github.com/${github_repo_full}"
				from components.java
				licenses {
					license {

					}
				}
				developers {
					developer {
						id = 'Elix-x'
						name = 'Elix X'
						email = 'elix.x.ggl@gmail.com'
						url = 'https://github.com/Elix-x'
					}
				}
				scm {
					connection = "scm:git:git://github.com/${github_repo_full}.git"
					developerConnection = "scm:git:ssh://github.com:${github_repo_full}.git"
					url = "https://github.com/${github_repo_full}/tree/master"
				}
			}
		}
	}
	repositories {
		maven {
			name = 'GitHubPackages'
			url = "https://maven.pkg.github.com/${github_repo_full}"
			credentials {
				username = System.getenv('GITHUBACCESSUSER')
				password = System.getenv('GITHUBACCESSTOKEN')
			}
		}
	}
}

def getGitLastCommitMessage = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--pretty=%B'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

curseforge {
	apiKey = System.getenv('CURSEFORGEACCESSTOKEN')
	project {
		id = curseforge_id
		releaseType = version_channel
		addGameVersion minecraft_version
		changelogType = 'markdown'
		changelog = "${getGitLastCommitMessage()}"
		mainArtifact jar
	}
}
